#ifndef MENUMAKER_H_
#define MENUMAKER_H_

#define MENUMAKER_INPUT_UP			1
#define MENUMAKER_INPUT_DOWN		2
#define MENUMAKER_INPUT_LEFT		3
#define MENUMAKER_INPUT_RIGHT		4
#define MENUMAKER_INPUT_SELECT		5
#define MENUMAKER_INPUT_BACK		6

#define MENUMAKER_TYPE_DEFAULT		0
#define MENUMAKER_TYPE_SUBMENU		1
#define MENUMAKER_TYPE_SELECT_SINGLE	2
#define MENUMAKER_TYPE_SELECT_MULTI	3
#define MENUMAKER_TYPE_INPUT_INTEGER	4

#include "LinkedList.h"
#include "Arduino.h" // for malloc
#include "string.h" // for memset

class MenuMakerEntry {
public:
	int id;
	const char *title;
	const char *overlay;
	int type;
	MenuMakerEntry(int id, const char *title, int type) : id(id), title(title), type(type), overlay(0) {};
	~MenuMakerEntry(){};
	void setOverlay(const char *text);
	const char* text();
	
};

class MenuMakerMenu {
public:
	MenuMakerMenu(int id, const char* title, int type, int numEntries) : id(id), title(title), type(type) {
		entries = new LinkedList<MenuMakerEntry*>();
		switch (type) {
			case MENUMAKER_TYPE_SELECT_SINGLE:
				// to store the id of the selected entry
				choice = malloc(sizeof(int));
				*(int*)choice = -1;
				break;
			case MENUMAKER_TYPE_SELECT_MULTI:
				// to store the id of the selected entry
				choice = malloc(numEntries * sizeof(bool));
				memset(choice, 0, numEntries * sizeof(bool)); // sizeof(choice)?
				break;
			default:
				choice = 0;
				break;
		}
	}
	MenuMakerMenu* addEntry(int id, const char* title, int type);
	void removeEntry(int id);
	void removeEntries();
	
	int indexOfEntryId(int id);
	bool isPosSelected(int pos);

	int id;
	const char* title;
	int type;
	LinkedList<MenuMakerEntry*> *entries;
	void *choice;
};

class MenuMaker {
public:
	MenuMaker() : currentMenu(0) {
		menus = new LinkedList<MenuMakerMenu*>();
		history = new LinkedList<MenuMakerMenu*>();
	};
	
	// Auto-generated by Perl script into MenuMaker_menu.h
	virtual void begin() = 0;
	
	void redraw();
	void show(int id);

	void input(int key);
	/**
	 * Tell the menu stack you want an item highlighted.
	 * Function name is stupid.
	 **/
	void onHighlight(int index);
	
	LinkedList<MenuMakerMenu*> *menus;
	MenuMakerMenu* currentMenu;
	int currentEntry;

protected:
	LinkedList<MenuMakerMenu*> *history;

	//Implement this for your hardware
	virtual void draw(MenuMakerMenu* menu, int highlight = 0) = 0;
	
	// Implement this for your hardware
	virtual void highlight(int pos) = 0;

	// Called for action entries
	virtual void onEntry(int id) = 0;
	
	void createMenus(int n);
	MenuMakerMenu* createMenu(int id, const char* title, int type, int numEntries);
	
	virtual void onLeave(MenuMakerMenu* menu) {};
	virtual void onExit(MenuMakerMenu* menu) {};
	virtual void onPrepare(MenuMakerMenu* menu) {};
	virtual void onSelection(MenuMakerMenu* menu, void* old) {};
	
private:
	void select(MenuMakerMenu *menu);
	MenuMakerMenu* resolveMenu(int id);
	
};

#endif // MENUMAKER_H_
