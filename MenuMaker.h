#ifndef MENUMAKER_H_
#define MENUMAKER_H_

#define MENUMAKER_TYPE_DEFAULT		0
#define MENUMAKER_TYPE_SUBMENU		1
#define MENUMAKER_TYPE_SELECT_SINGLE	2
#define MENUMAKER_TYPE_SELECT_MULTI	3
#define MENUMAKER_TYPE_INPUT_INTEGER	4

#include "LinkedList.h"

class MenuMakerEntry {
public:
	int id;
	const char *title;
	const char *overlay;
	int type;
	MenuMakerEntry(int id, const char *title, int type);
	void setOverlay(const char *text);
	const char* text();
	
};

class MenuMakerMenu {
public:
	MenuMakerMenu(int id, const char* title, int type = MENUMAKER_TYPE_DEFAULT);
	MenuMakerMenu* addEntry(int id, const char* title, int type);

	int id;
	const char* title;
	int type;
	LinkedList<MenuMakerEntry*> *entries;
};

class MenuMaker {
public:
	// Auto-generated by Perl script into MenuMaker_menu.h
	MenuMaker() : currentMenu(0) {
		menus = new LinkedList<MenuMakerMenu*>();
		history = new LinkedList<MenuMakerMenu*>();
	};
	
	void begin();
	
	void redraw();
	void show(int id);
	/**
	 * Call this from your HID
	 **/
	void onUp();
	void onDown();
	void onLeft();
	void onRight();
	void onSelect();
	void onBack();
	/**
	 * Tell the menu stack you want an item highlighted.
	 * Function name is stupid.
	 **/
	void onHighlight(int index);
	
	LinkedList<MenuMakerMenu*> *menus;
	MenuMakerMenu* currentMenu;
	int currentEntry;

protected:
	LinkedList<MenuMakerMenu*> *history;

	//Implement this for your hardware
	virtual void draw(MenuMakerMenu* menu, int highlight = 0) = 0;
	
	// Implement this for your hardware
	virtual void highlight(int pos) = 0;

	// Called for action entries
	virtual void onEntry(int id) = 0;
		
	MenuMakerMenu* createMenu(int id, const char* title, int type);
	
private:
	void select(MenuMakerMenu *menu);
	MenuMakerMenu* resolveMenu(int id);
	
};

#endif // MENUMAKER_H_
